"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Peer = void 0;
class Peer {
    client;
    data;
    constructor(client, netID) {
        this.client = client;
        this.data = { netID };
        // this.netID = netID;
        this.client = client;
    }
    /**
     * Get ENetPeer Round Trip Time (RTT).
     */
    get ping() {
        return this.client._client.getPeerRTT(this.data.netID);
    }
    /**
     * Get [ENetPeerState](http://enet.bespin.org/enet_8h.html#a058bc368c507eb86cb47f3946f38d558).
     */
    get state() {
        return this.client._client.getPeerState(this.data.netID);
    }
    /**
     * Sends multiple packets to a single peer.
     * @param data An argument of packets that contains the `parse()` function or just an array of Buffers.
     */
    send(...data) {
        Peer.send(this.client._client, this.data.netID, ...data);
    }
    /**
     * Sends multiple packets to a single peer.
     * @param _client The Wrapper client.
     * @param netID The netID of a peer.
     * @param data An argument of packets that contains the `parse()` function or just an array of Buffers.
     */
    static send(_client, netID, ...data) {
        const packets = data.map((packet) => {
            if (Buffer.isBuffer(packet))
                return packet;
            else {
                switch (packet.constructor.name) {
                    case "TextPacket":
                    case "TankPacket": {
                        return packet.parse();
                    }
                    case "Variant": {
                        return packet.parse().parse();
                    }
                    default: {
                        break;
                    }
                }
            }
        });
        _client.send(netID, packets.length, packets);
    }
    /**
     * Disconnects the peer.
     * @param type Type of disconnection. Defaults to `later`.
     */
    disconnect(type = "later") {
        switch (type) {
            case "normal": {
                this.client._client.disconnect(this.data.netID);
                break;
            }
            case "later": {
                this.client._client.disconnectLater(this.data.netID);
                break;
            }
            case "now": {
                this.client._client.disconnectNow(this.data.netID);
                break;
            }
        }
    }
}
exports.Peer = Peer;
