import { ClientType } from "../../types";
import { Sendable } from "../../types/packets";
import { Client } from "./Client";
declare class Peer<T> {
    private client;
    data: T;
    constructor(client: Client, netID: number);
    /**
     * Get ENetPeer Round Trip Time (RTT).
     */
    get ping(): number;
    /**
     * Get [ENetPeerState](http://enet.bespin.org/enet_8h.html#a058bc368c507eb86cb47f3946f38d558).
     */
    get state(): number;
    /**
     * Sends multiple packets to a single peer.
     * @param data An argument of packets that contains the `parse()` function or just an array of Buffers.
     */
    send(...data: Sendable[]): void;
    /**
     * Sends multiple packets to a single peer.
     * @param _client The Wrapper client.
     * @param netID The netID of a peer.
     * @param data An argument of packets that contains the `parse()` function or just an array of Buffers.
     */
    static send(_client: ClientType, netID: number, ...data: Sendable[]): void;
    /**
     * Disconnects the peer.
     * @param type Type of disconnection. Defaults to `later`.
     */
    disconnect(type?: "now" | "later" | "normal"): void;
}
export { Peer };
