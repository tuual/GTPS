/// <reference types="node" />
import EventEmitter from "eventemitter3";
import { ClientOptions, ClientType } from "../../types/client";
import { Peer } from "./Peer";
import { ActionEvent, LoginInfo } from "../../types";
import { TankPacket } from "../packets/TankPacket";
declare class Client extends EventEmitter {
    _client: ClientType;
    config: ClientOptions;
    constructor(options?: ClientOptions);
    on(event: "connect", listener: (netID: number) => void): this;
    on(event: "raw", listener: (netID: number, data: Buffer) => void): this;
    on<T>(event: "action", listener: (peer: Peer<T>, data: ActionEvent) => void): this;
    on<T>(event: "tank", listener: (peer: Peer<T>, data: TankPacket) => void): this;
    on<T>(event: "text", listener: (peer: Peer<T>, data: LoginInfo) => void): this;
    on(event: "ready", listener: () => void): this;
    on(event: "error", listener: (error: Error, data?: Buffer) => void): this;
    on(event: "disconnect", listener: (netID: number) => void): this;
    send(id: number, count: number, packets: Buffer[]): void;
    connect(ipAddress: string, port: number, peerID: number): boolean;
    toggleNewPacket(): void;
    private emitter;
    listen(): void;
    private startWeb;
    private handleEvent;
}
export { Client };
